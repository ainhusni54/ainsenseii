<!-- 
  Aplikasi web ini direka untuk membantu kanak-kanak sindrom Down berlatih menulis nama mereka.
  Ia menggunakan ciri interaktif dengan panduan visual dan maklum balas.
  Keseluruhan aplikasi, termasuk HTML, CSS, dan JavaScript, berada dalam satu fail.
-->
<!DOCTYPE html>
<html lang="ms">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplikasi Latihan Menulis Nama</title>
    <!-- Tailwind CSS untuk styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .container {
            width: 100%;
            max-width: 800px;
            padding: 20px;
        }

        .message-box {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #4caf50;
            color: white;
            padding: 15px 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            z-index: 1000;
        }

        .message-box.show {
            opacity: 1;
        }

        .keyboard-btn {
            background-color: #fca5a5; /* Warna pink cerah */
            color: #444;
            font-weight: bold;
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            transition: transform 0.1s ease-in-out, background-color 0.1s ease-in-out;
        }
        .keyboard-btn:hover {
            background-color: #fecaca; /* Warna pink lebih cerah saat hover */
            transform: scale(1.05);
        }
        .special-btn {
            background-color: #fcd34d; /* Warna kuning */
        }
        .special-btn:hover {
            background-color: #fde68a; /* Warna kuning lebih cerah saat hover */
        }
        .delete-btn {
            background-color: #f87171; /* Warna merah */
        }
        .delete-btn:hover {
            background-color: #fca5a5; /* Warna merah lebih cerah saat hover */
        }
    </style>
</head>
<body>

<div class="container bg-white rounded-3xl shadow-xl p-8">
    <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-800">Aplikasi Jejak Nama Ceria</h1>
        <p class="mt-2 text-lg text-gray-600">Alat bantu digital untuk murid sindrom Down menulis nama.</p>
    </div>

    <div class="mb-6">
        <label for="studentName" class="block text-gray-700 text-sm font-bold mb-2">Masukkan Nama Anda:</label>
        <input type="text" id="studentName" class="shadow appearance-none border rounded-xl w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Contoh: Ali" readonly>
    </div>

    <div class="flex justify-center space-x-4 mb-8">
        <button id="startButton" class="bg-emerald-400 hover:bg-emerald-500 text-white font-bold py-2 px-6 rounded-xl shadow-lg transition duration-300">
            Mulakan Latihan
        </button>
        <button id="clearButton" class="bg-orange-400 hover:bg-orange-500 text-white font-bold py-2 px-6 rounded-xl shadow-lg transition duration-300">
            Padamkan
        </button>
    </div>
    
    <div id="keyboard" class="flex flex-col items-center gap-2 p-4 bg-purple-200 rounded-xl shadow-inner mb-6">
        <!-- Butang-butang huruf akan dijana di sini oleh JavaScript -->
    </div>

    <div class="canvas-container relative w-full border-4 border-dashed border-purple-300 rounded-2xl overflow-hidden" style="padding-bottom: 75%; height: 0;">
        <canvas id="writingCanvas" class="absolute inset-0 w-full h-full bg-white"></canvas>
    </div>

    <div id="instruction" class="mt-6 text-center text-gray-600 italic">
        Sila sentuh huruf untuk menaip nama anda.
    </div>

    <div id="messageBox" class="message-box"></div>
</div>

<script>
    // Inisialisasi variabel dan elemen DOM
    const canvas = document.getElementById('writingCanvas');
    const ctx = canvas.getContext('2d');
    const studentNameInput = document.getElementById('studentName');
    const startButton = document.getElementById('startButton');
    const clearButton = document.getElementById('clearButton');
    const instructionDiv = document.getElementById('instruction');
    const messageBox = document.getElementById('messageBox');
    const keyboardDiv = document.getElementById('keyboard');

    let isDrawing = false;
    let nameToTrace = '';
    let currentCharacterIndex = 0;
    let guidingLines = [];
    let tracedPaths = []; // Untuk menyimpan lukisan yang berjaya
    
    // Kanvas off-screen untuk mengesan penjejakan
    const offscreenCanvas = document.createElement('canvas');
    const offscreenCtx = offscreenCanvas.getContext('2d');
    let totalGuidingPixels = 0;
    
    // Inisialisasi Web Audio API
    const AudioContext = window.AudioContext || window.webkitAudioContext;
    const audioCtx = new AudioContext();

    // Fungsi untuk mainkan bunyi kejayaan (bunyi chime)
    function playChimeSound() {
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();

        oscillator.type = 'sine';
        oscillator.frequency.value = 880; // A5
        gainNode.gain.setValueAtTime(0.5, audioCtx.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.3);

        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 0.3);
    }

    // Fungsi untuk mainkan bunyi tepukan tangan
    function playClappingSound() {
        const bufferSize = 2 * audioCtx.sampleRate;
        const buffer = audioCtx.createBuffer(1, bufferSize, audioCtx.sampleRate);
        const output = buffer.getChannelData(0);

        // Generate white noise
        for (let i = 0; i < bufferSize; i++) {
            output[i] = Math.random() * 2 - 1;
        }

        const whiteNoiseSource = audioCtx.createBufferSource();
        whiteNoiseSource.buffer = buffer;
        
        const filter = audioCtx.createBiquadFilter();
        filter.type = 'highpass';
        filter.frequency.value = 2000;
        
        const noiseGain = audioCtx.createGain();
        noiseGain.gain.setValueAtTime(1, audioCtx.currentTime);
        noiseGain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.5);
        
        whiteNoiseSource.connect(filter);
        filter.connect(noiseGain);
        noiseGain.connect(audioCtx.destination);
        
        whiteNoiseSource.start();
    }

    // Saiz kanvas responsif
    function resizeCanvas() {
        const container = canvas.parentElement;
        canvas.width = container.offsetWidth;
        canvas.height = container.offsetHeight;
        offscreenCanvas.width = canvas.width;
        offscreenCanvas.height = canvas.height;
        if (nameToTrace) {
            generateGuidingLines();
            drawGuidingLines();
        }
    }
    window.addEventListener('resize', resizeCanvas);
    window.addEventListener('load', resizeCanvas);

    // Fungsi untuk memaparkan mesej sementara di skrin
    function showMessage(msg, duration = 2000) {
        messageBox.textContent = msg;
        messageBox.classList.add('show');
        setTimeout(() => {
            messageBox.classList.remove('show');
        }, duration);
    }

    // Fungsi untuk memadamkan kanvas dan set semula keadaan
    function clearCanvas(preserveName = false) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        offscreenCtx.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
        guidingLines = [];
        tracedPaths = [];
        currentCharacterIndex = 0;
        if (!preserveName) {
            studentNameInput.value = '';
            nameToTrace = '';
            instructionDiv.textContent = 'Sila sentuh huruf untuk menaip nama anda.';
        }
        drawGuidingLines();
    }

    // Fungsi untuk memulakan latihan
    startButton.addEventListener('click', () => {
        const typedName = studentNameInput.value.trim().toUpperCase();
        if (typedName === '') {
            showMessage('Sila masukkan nama terlebih dahulu.');
            return;
        }
        clearCanvas(true);
        nameToTrace = typedName;
        generateGuidingLines();
        drawCurrentGuidingLetterAndCountPixels();
        drawGuidingLines();
        showMessage('Mula menjejak huruf pertama!');
        updateInstruction();
    });

    // Fungsi untuk padamkan kanvas (reset penuh)
    clearButton.addEventListener('click', () => clearCanvas(false));

    // Fungsi untuk menjana garisan panduan untuk setiap huruf
    function generateGuidingLines() {
        const fontSize = canvas.height * 0.5;
        ctx.font = `${fontSize}px sans-serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        guidingLines = [];
        const letterGap = canvas.width * 0.03;
        let totalWidth = 0;
        for (let i = 0; i < nameToTrace.length; i++) {
            totalWidth += ctx.measureText(nameToTrace[i]).width;
            if (i < nameToTrace.length - 1) {
                totalWidth += letterGap;
            }
        }

        let startX = (canvas.width - totalWidth) / 2;
        const startY = canvas.height / 2;

        for (let i = 0; i < nameToTrace.length; i++) {
            const letter = nameToTrace[i];
            const letterWidth = ctx.measureText(letter).width;
            guidingLines.push({
                x: startX + letterWidth / 2,
                y: startY,
                letter: letter
            });
            startX += letterWidth + letterGap;
        }
    }

    // Fungsi untuk melukis panduan huruf semasa dan mengira piksel
    function drawCurrentGuidingLetterAndCountPixels() {
        offscreenCtx.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
        if (currentCharacterIndex < nameToTrace.length) {
            const currentLine = guidingLines[currentCharacterIndex];
            offscreenCtx.font = `${canvas.height * 0.5}px sans-serif`;
            offscreenCtx.textAlign = 'center';
            offscreenCtx.textBaseline = 'middle';
            offscreenCtx.fillStyle = 'rgba(0,0,0,1)';
            offscreenCtx.fillText(currentLine.letter, currentLine.x, currentLine.y);

            const imageData = offscreenCtx.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);
            totalGuidingPixels = 0;
            for (let i = 0; i < imageData.data.length; i += 4) {
                if (imageData.data[i+3] > 0) {
                    totalGuidingPixels++;
                }
            }
            offscreenCtx.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
        }
    }

    // Fungsi untuk melukis garisan panduan
    function drawGuidingLines() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        ctx.font = `${canvas.height * 0.5}px sans-serif`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        // Lukis huruf yang telah dijejak (lukisan pengguna)
        ctx.strokeStyle = '#2563eb';
        ctx.lineWidth = 10;
        ctx.lineCap = 'round';
        tracedPaths.forEach(path => {
            ctx.beginPath();
            ctx.moveTo(path[0].x, path[0].y);
            path.slice(1).forEach(p => ctx.lineTo(p.x, p.y));
            ctx.stroke();
        });

        // Lukiskan huruf panduan
        guidingLines.forEach((line, index) => {
            if (index === currentCharacterIndex) {
                ctx.setLineDash([10, 10]);
                ctx.strokeStyle = 'rgba(0, 0, 255, 0.7)';
                ctx.lineWidth = 3;
                ctx.strokeText(line.letter, line.x, line.y);
                ctx.setLineDash([]);
            } else {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
                ctx.fillText(line.letter, line.x, line.y);
            }
        });
    }

    // Fungsi untuk mengemaskini arahan di bawah kanvas
    function updateInstruction() {
        if (currentCharacterIndex < nameToTrace.length) {
            instructionDiv.textContent = `Sekarang, jejak huruf '${nameToTrace[currentCharacterIndex]}'.`;
            playChimeSound(); // Bunyi chime untuk setiap huruf yang berjaya dijejak
        } else {
            instructionDiv.textContent = 'Tahniah! Anda telah berjaya menulis nama anda!';
            showMessage('Kerja yang bagus! Tahniah!');
            // Bunyi kejayaan akhir apabila semua huruf dijejak
            playClappingSound();
        }
    }

    // Handle event mouse dan sentuhan untuk melukis
    function getPosition(event) {
        const rect = canvas.getBoundingClientRect();
        const scaleX = canvas.width / rect.width;
        const scaleY = canvas.height / rect.height;
        let clientX, clientY;

        if (event.touches && event.touches.length > 0) {
            clientX = event.touches[0].clientX;
            clientY = event.touches[0].clientY;
        } else {
            clientX = event.clientX;
            clientY = event.clientY;
        }

        return {
            x: (clientX - rect.left) * scaleX,
            y: (clientY - rect.top) * scaleY
        };
    }

    let currentPath = [];
    function startDrawing(event) {
        if (!nameToTrace || currentCharacterIndex >= nameToTrace.length) return;
        event.preventDefault();
        isDrawing = true;
        currentPath = [];
        const pos = getPosition(event);
        currentPath.push(pos);
        ctx.beginPath();
        ctx.moveTo(pos.x, pos.y);
        offscreenCtx.beginPath();
        offscreenCtx.moveTo(pos.x, pos.y);
    }

    function draw(event) {
        if (!isDrawing) return;
        event.preventDefault();
        const pos = getPosition(event);
        currentPath.push(pos);
        
        ctx.lineWidth = 10;
        ctx.lineCap = 'round';
        ctx.strokeStyle = '#2563eb';
        ctx.lineTo(pos.x, pos.y);
        ctx.stroke();

        offscreenCtx.lineWidth = 20;
        offscreenCtx.lineCap = 'round';
        offscreenCtx.strokeStyle = 'rgba(0,0,0,1)';
        offscreenCtx.lineTo(pos.x, pos.y);
        offscreenCtx.stroke();
    }

    function stopDrawing() {
        if (!isDrawing) return;
        isDrawing = false;
        ctx.closePath();
        offscreenCtx.closePath();

        const success = checkTracingSuccess();
        
        if (success) {
            tracedPaths.push(currentPath);
            currentCharacterIndex++;
        } 
        
        // Padamkan lukisan pengguna sahaja dan lukis semula semua
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawGuidingLines();

        if (success) {
            if (currentCharacterIndex < nameToTrace.length) {
                drawCurrentGuidingLetterAndCountPixels();
                updateInstruction();
                showMessage('Bagus! Berjaya dijejak.');
            } else {
                updateInstruction();
            }
        } else {
            drawCurrentGuidingLetterAndCountPixels();
            showMessage("Sila cuba lagi!");
        }
    }
    
    // Fungsi untuk menyemak kejayaan penjejakan
    function checkTracingSuccess() {
        const currentLine = guidingLines[currentCharacterIndex];
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        const tempCtx = tempCanvas.getContext('2d');
        tempCtx.font = `${canvas.height * 0.5}px sans-serif`;
        tempCtx.textAlign = 'center';
        tempCtx.textBaseline = 'middle';
        tempCtx.fillStyle = 'rgba(0,0,0,1)';
        tempCtx.fillText(currentLine.letter, currentLine.x, currentLine.y);

        const guidingImageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
        let totalGuidingPixels = 0;
        for (let i = 0; i < guidingImageData.data.length; i += 4) {
            if (guidingImageData.data[i+3] > 0) {
                totalGuidingPixels++;
            }
        }

        const tracedImageData = offscreenCtx.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);
        let tracedPixels = 0;
        for (let i = 0; i < tracedImageData.data.length; i += 4) {
            if (tracedImageData.data[i+3] > 0 && guidingImageData.data[i+3] > 0) {
                tracedPixels++;
            }
        }
        
        offscreenCtx.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);

        const successThreshold = 0.3; // 30%
        return totalGuidingPixels > 0 && (tracedPixels / totalGuidingPixels) > successThreshold;
    }

    // Event listeners untuk mouse dan sentuhan
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseleave', stopDrawing);
    canvas.addEventListener('mousemove', draw);

    canvas.addEventListener('touchstart', startDrawing, {passive:false});
    canvas.addEventListener('touchend', stopDrawing);
    canvas.addEventListener('touchcancel', stopDrawing);
    canvas.addEventListener('touchmove', draw, {passive:false});

    // Mula-mula, jana papan kekunci apabila halaman dimuatkan
    window.onload = function() {
        resizeCanvas();
        generateKeyboard();
    };

    // Fungsi untuk menjana papan kekunci
    function generateKeyboard() {
        const keyboardRows = [
            'QWERTYUIOP'.split(''),
            'ASDFGHJKL'.split(''),
            'ZXCVBNM'.split('')
        ];

        keyboardRows.forEach(row => {
            const rowDiv = document.createElement('div');
            rowDiv.className = 'flex justify-center gap-2 w-full';
            row.forEach(letter => {
                const button = document.createElement('button');
                button.textContent = letter;
                button.className = 'keyboard-btn aspect-square flex-1 text-lg sm:text-2xl';
                button.addEventListener('click', () => {
                    studentNameInput.value += letter;
                });
                rowDiv.appendChild(button);
            });
            keyboardDiv.appendChild(rowDiv);
        });

        // Baris untuk Spacebar dan Backspace
        const specialKeysRow = document.createElement('div');
        specialKeysRow.className = 'flex justify-center items-center gap-2 w-full mt-2';

        const spaceButton = document.createElement('button');
        spaceButton.innerHTML = 'Ruang';
        spaceButton.className = 'special-btn flex-grow py-3 rounded-lg shadow transition duration-300 text-lg sm:text-2xl';
        spaceButton.addEventListener('click', () => {
            studentNameInput.value += ' ';
        });
        specialKeysRow.appendChild(spaceButton);

        const backspaceButton = document.createElement('button');
        backspaceButton.textContent = '⌫';
        backspaceButton.className = 'delete-btn py-3 px-3 rounded-lg shadow transition duration-300 text-lg sm:text-2xl aspect-square';
        backspaceButton.addEventListener('click', () => {
            studentNameInput.value = studentNameInput.value.slice(0, -1);
        });
        specialKeysRow.appendChild(backspaceButton);

        keyboardDiv.appendChild(specialKeysRow);
    }
</script>

</body>
</html>
